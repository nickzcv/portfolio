{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport WebMercatorViewport, { normalizeViewportProps } from 'viewport-mercator-project';\nimport { clamp } from './math-utils';\nimport assert from './assert';\nexport var MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\n\nvar MapState = function () {\n  function MapState(_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? MAPBOX_LIMITS.maxZoom : _ref$maxZoom,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? MAPBOX_LIMITS.minZoom : _ref$minZoom,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? MAPBOX_LIMITS.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? MAPBOX_LIMITS.minPitch : _ref$minPitch,\n        transitionDuration = _ref.transitionDuration,\n        transitionEasing = _ref.transitionEasing,\n        transitionInterpolator = _ref.transitionInterpolator,\n        transitionInterruption = _ref.transitionInterruption,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startRotatePos = _ref.startRotatePos,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, MapState);\n\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n    this._viewportProps = this._applyConstraints({\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      transitionDuration: transitionDuration,\n      transitionEasing: transitionEasing,\n      transitionInterpolator: transitionInterpolator,\n      transitionInterruption: transitionInterruption\n    });\n    this._state = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n  }\n\n  _createClass(MapState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedMapState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n\n      var startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n        startPanLngLat: startPanLngLat,\n        pos: pos\n      }),\n          _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n          longitude = _this$_calculateNewLn2[0],\n          latitude = _this$_calculateNewLn2[1];\n\n      return this._getUpdatedMapState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedMapState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedMapState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        newRotation = this._calculateNewPitchAndBearing(_objectSpread(_objectSpread({}, this._getRotationParams(pos, startRotatePos)), {}, {\n          startBearing: startBearing,\n          startPitch: startPitch\n        }));\n      } else {\n        newRotation = {\n          bearing: startBearing + deltaAngleX,\n          pitch: startPitch + deltaAngleY\n        };\n      }\n\n      return this._getUpdatedMapState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedMapState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedMapState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      assert(scale > 0, '`scale` must be a positive number');\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomLngLat = _this$_state2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      assert(startZoomLngLat, '`startZoomLngLat` prop is required ' + 'for zoom behavior to calculate where to position the map.');\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom || 0\n      });\n\n      var zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {\n        zoom: zoom\n      }));\n\n      var _zoomedViewport$getMa = zoomedViewport.getMapCenterByLngLatPosition({\n        lngLat: startZoomLngLat,\n        pos: pos\n      }),\n          _zoomedViewport$getMa2 = _slicedToArray(_zoomedViewport$getMa, 2),\n          longitude = _zoomedViewport$getMa2[0],\n          latitude = _zoomedViewport$getMa2[1];\n\n      return this._getUpdatedMapState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedMapState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"_getUpdatedMapState\",\n    value: function _getUpdatedMapState(newProps) {\n      return new MapState(Object.assign({}, this._viewportProps, this._state, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      Object.assign(props, normalizeViewportProps(props));\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n          pos = _ref8.pos;\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n          startZoom = _ref9.startZoom;\n      var _this$_viewportProps = this._viewportProps,\n          maxZoom = _this$_viewportProps.maxZoom,\n          minZoom = _this$_viewportProps.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n          deltaScaleY = _ref10.deltaScaleY,\n          startBearing = _ref10.startBearing,\n          startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps2 = this._viewportProps,\n          minPitch = _this$_viewportProps2.minPitch,\n          maxPitch = _this$_viewportProps2.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"_getRotationParams\",\n    value: function _getRotationParams(pos, startPos) {\n      var deltaX = pos[0] - startPos[0];\n      var deltaY = pos[1] - startPos[1];\n      var centerY = pos[1];\n      var startY = startPos[1];\n      var _this$_viewportProps3 = this._viewportProps,\n          width = _this$_viewportProps3.width,\n          height = _this$_viewportProps3.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      return {\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      };\n    }\n  }]);\n\n  return MapState;\n}();\n\nexport { MapState as default };","map":{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","assert","Number","pos","startPos","deltaAngleX","deltaAngleY","newRotation","scale","zoomedViewport","lngLat","newProps","Object","props","clamp","normalizeViewportProps","viewport","Math","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY"],"mappings":"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","sourcesContent":["import WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport default class MapState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Cursor position when the rotate operation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Start panning\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer is\n   * @param {[Number, Number]} [params.startPos] - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({\n      startPanLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedMapState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   * @param {Number} params.deltaAngleX - the change to bearing.\n   * @param {Number} params.deltaAngleY - the change to pitch.\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedMapState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the current center is\n   * @param {[Number, Number]} [params.startPos] - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} params.scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({\n      lngLat: startPanLngLat,\n      pos\n    });\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}