{"ast":null,"code":"import _classCallCheck from \"/home/nick/Documents/GitHub/portfolio/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/nick/Documents/GitHub/portfolio/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/nick/Documents/GitHub/portfolio/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/nick/Documents/GitHub/portfolio/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nvar KEY_EVENTS = INPUT_EVENT_TYPES.KEY_EVENTS;\nvar DOWN_EVENT_TYPE = 'keydown';\nvar UP_EVENT_TYPE = 'keyup';\n\nvar KeyInput = /*#__PURE__*/function (_Input) {\n  _inherits(KeyInput, _Input);\n\n  var _super = _createSuper(KeyInput);\n\n  function KeyInput(element, callback, options) {\n    var _this;\n\n    _classCallCheck(this, KeyInput);\n\n    _this = _super.call(this, element, callback, options);\n\n    _this.handleEvent = function (event) {\n      // Ignore if focused on text input\n      var targetElement = event.target || event.srcElement;\n\n      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n        return;\n      }\n\n      if (_this.enableDownEvent && event.type === 'keydown') {\n        _this.callback({\n          type: DOWN_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n\n      if (_this.enableUpEvent && event.type === 'keyup') {\n        _this.callback({\n          type: UP_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n    };\n\n    _this.enableDownEvent = _this.options.enable;\n    _this.enableUpEvent = _this.options.enable;\n    _this.events = (_this.options.events || []).concat(KEY_EVENTS);\n    element.tabIndex = _this.options.tabIndex || 0;\n    element.style.outline = 'none';\n\n    _this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent);\n    });\n\n    return _this;\n  }\n\n  _createClass(KeyInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === DOWN_EVENT_TYPE) {\n        this.enableDownEvent = enabled;\n      }\n\n      if (eventType === UP_EVENT_TYPE) {\n        this.enableUpEvent = enabled;\n      }\n    }\n  }]);\n\n  return KeyInput;\n}(Input);\n\nexport { KeyInput as default };","map":{"version":3,"sources":["../../../src/inputs/key-input.ts"],"names":[],"mappings":";;;;AACA,OAAO,KAAP,MAAkC,SAAlC;AAEA,SAAQ,iBAAR,QAAgC,cAAhC;AAEA,IAAO,UAAP,GAAqB,iBAArB,CAAO,UAAP;AACA,IAAM,eAAe,GAAG,SAAxB;AACA,IAAM,aAAa,GAAG,OAAtB;;IAOqB,Q;;;;;EAMnB,kBACE,OADF,EAEE,QAFF,EAGE,OAHF,EAG0B;IAAA;;IAAA;;IAExB,0BAAM,OAAN,EAAe,QAAf,EAAyB,OAAzB;;IA6BF,MAAA,WAAA,GAAc,UAAC,KAAD,EAAyB;MACrC;MACA,IAAM,aAAa,GAAI,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,UAA7C;;MACA,IACG,aAAa,CAAC,OAAd,KAA0B,OAA1B,IAAsC,aAAkC,CAAC,IAAnC,KAA4C,MAAnF,IACA,aAAa,CAAC,OAAd,KAA0B,UAF5B,EAGE;QACA;MACD;;MAED,IAAI,MAAK,eAAL,IAAwB,KAAK,CAAC,IAAN,KAAe,SAA3C,EAAsD;QACpD,MAAK,QAAL,CAAc;UACZ,IAAI,EAAE,eADM;UAEZ,QAAQ,EAAE,KAFE;UAGZ,GAAG,EAAE,KAAK,CAAC,GAHC;UAIZ,MAAM,EAAE,KAAK,CAAC;QAJF,CAAd;MAMD;;MAED,IAAI,MAAK,aAAL,IAAsB,KAAK,CAAC,IAAN,KAAe,OAAzC,EAAkD;QAChD,MAAK,QAAL,CAAc;UACZ,IAAI,EAAE,aADM;UAEZ,QAAQ,EAAE,KAFE;UAGZ,GAAG,EAAE,KAAK,CAAC,GAHC;UAIZ,MAAM,EAAE,KAAK,CAAC;QAJF,CAAd;MAMD;IACF,CA3BD;;IA3BE,MAAK,eAAL,GAAuB,MAAK,OAAL,CAAa,MAApC;IACA,MAAK,aAAL,GAAqB,MAAK,OAAL,CAAa,MAAlC;IAEA,MAAK,MAAL,GAAc,CAAC,MAAK,OAAL,CAAa,MAAb,IAAuB,EAAxB,EAA4B,MAA5B,CAAmC,UAAnC,CAAd;IAEA,OAAO,CAAC,QAAR,GAAmB,MAAK,OAAL,CAAa,QAAb,IAAyB,CAA5C;IACA,OAAO,CAAC,KAAR,CAAc,OAAd,GAAwB,MAAxB;;IACA,MAAK,MAAL,CAAY,OAAZ,CAAoB,UAAA,KAAK;MAAA,OAAI,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAgC,MAAK,WAArC,CAAJ;IAAA,CAAzB;;IAXwB;EAYzB;;;;WAED,mBAAO;MAAA;;MACL,KAAK,MAAL,CAAY,OAAZ,CAAoB,UAAA,KAAK;QAAA,OAAI,MAAI,CAAC,OAAL,CAAa,mBAAb,CAAiC,KAAjC,EAAwC,MAAI,CAAC,WAA7C,CAAJ;MAAA,CAAzB;IACD;IAED;;;AAGG;;;;WACH,yBAAgB,SAAhB,EAAmC,OAAnC,EAAmD;MACjD,IAAI,SAAS,KAAK,eAAlB,EAAmC;QACjC,KAAK,eAAL,GAAuB,OAAvB;MACD;;MACD,IAAI,SAAS,KAAK,aAAlB,EAAiC;QAC/B,KAAK,aAAL,GAAqB,OAArB;MACD;IACF;;;;EAtCmC,K;;SAAjB,Q","sourceRoot":"","sourcesContent":["import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nconst { KEY_EVENTS } = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput extends Input {\n    constructor(element, callback, options) {\n        super(element, callback, options);\n        this.handleEvent = (event) => {\n            // Ignore if focused on text input\n            const targetElement = (event.target || event.srcElement);\n            if ((targetElement.tagName === 'INPUT' && targetElement.type === 'text') ||\n                targetElement.tagName === 'TEXTAREA') {\n                return;\n            }\n            if (this.enableDownEvent && event.type === 'keydown') {\n                this.callback({\n                    type: DOWN_EVENT_TYPE,\n                    srcEvent: event,\n                    key: event.key,\n                    target: event.target\n                });\n            }\n            if (this.enableUpEvent && event.type === 'keyup') {\n                this.callback({\n                    type: UP_EVENT_TYPE,\n                    srcEvent: event,\n                    key: event.key,\n                    target: event.target\n                });\n            }\n        };\n        this.enableDownEvent = this.options.enable;\n        this.enableUpEvent = this.options.enable;\n        this.events = (this.options.events || []).concat(KEY_EVENTS);\n        element.tabIndex = this.options.tabIndex || 0;\n        element.style.outline = 'none';\n        this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n    }\n    destroy() {\n        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n    enableEventType(eventType, enabled) {\n        if (eventType === DOWN_EVENT_TYPE) {\n            this.enableDownEvent = enabled;\n        }\n        if (eventType === UP_EVENT_TYPE) {\n            this.enableUpEvent = enabled;\n        }\n    }\n}\n//# sourceMappingURL=key-input.js.map"]},"metadata":{},"sourceType":"module"}