{"ast":null,"code":"import { worldToLngLat } from './web-mercator-utils';\nimport { mod, log2 } from './math-utils';\nconst TILE_SIZE = 512;\nexport default function normalizeViewportProps(props) {\n  const {\n    width,\n    height,\n    pitch = 0\n  } = props;\n  let {\n    longitude,\n    latitude,\n    zoom,\n    bearing = 0\n  } = props;\n\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  const minZoom = log2(height / TILE_SIZE);\n\n  if (zoom <= minZoom) {\n    zoom = minZoom;\n    latitude = 0;\n  } else {\n    const halfHeightPixels = height / 2 / Math.pow(2, zoom);\n    const minLatitude = worldToLngLat([0, halfHeightPixels])[1];\n\n    if (latitude < minLatitude) {\n      latitude = minLatitude;\n    } else {\n      const maxLatitude = worldToLngLat([0, TILE_SIZE - halfHeightPixels])[1];\n\n      if (latitude > maxLatitude) {\n        latitude = maxLatitude;\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    longitude,\n    latitude,\n    zoom,\n    pitch,\n    bearing\n  };\n}","map":{"version":3,"sources":["../../src/normalize-viewport-props.ts"],"names":["TILE_SIZE","pitch","bearing","longitude","mod","minZoom","log2","height","zoom","latitude","halfHeightPixels","Math","minLatitude","worldToLngLat","maxLatitude"],"mappings":"AAAA,SAAA,aAAA,QAAA,sBAAA;AACA,SAAA,GAAA,EAAA,IAAA,QAAA,cAAA;AAGA,MAAMA,SAAS,GAAf,GAAA;AAkBA,eAAe,SAAA,sBAAA,CAAA,KAAA,EAAqE;EAClF,MAAM;IAAA,KAAA;IAAA,MAAA;IAAgBC,KAAK,GAAG;EAAxB,IAAN,KAAA;EACA,IAAI;IAAA,SAAA;IAAA,QAAA;IAAA,IAAA;IAA4BC,OAAO,GAAG;EAAtC,IAAJ,KAAA;;EAGA,IAAIC,SAAS,GAAG,CAAZA,GAAAA,IAAoBA,SAAS,GAAjC,GAAA,EAAyC;IACvCA,SAAS,GAAGC,GAAG,CAACD,SAAS,GAAV,GAAA,EAAHC,GAAG,CAAHA,GAAZD,GAAAA;EACD;;EACD,IAAID,OAAO,GAAG,CAAVA,GAAAA,IAAkBA,OAAO,GAA7B,GAAA,EAAqC;IACnCA,OAAO,GAAGE,GAAG,CAACF,OAAO,GAAR,GAAA,EAAHE,GAAG,CAAHA,GAAVF,GAAAA;EACD;;EAGD,MAAMG,OAAO,GAAGC,IAAI,CAACC,MAAM,GAA3B,SAAoB,CAApB;;EACA,IAAIC,IAAI,IAAR,OAAA,EAAqB;IACnBA,IAAI,GAAJA,OAAAA;IACAC,QAAQ,GAARA,CAAAA;EAFF,CAAA,MAGO;IAEL,MAAMC,gBAAgB,GAAGH,MAAM,GAANA,CAAAA,GAAaI,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAtC,IAAsCA,CAAtC;IACA,MAAMC,WAAW,GAAGC,aAAa,CAAC,CAAA,CAAA,EAAdA,gBAAc,CAAD,CAAbA,CAApB,CAAoBA,CAApB;;IACA,IAAIJ,QAAQ,GAAZ,WAAA,EAA4B;MAC1BA,QAAQ,GAARA,WAAAA;IADF,CAAA,MAEO;MACL,MAAMK,WAAW,GAAGD,aAAa,CAAC,CAAA,CAAA,EAAIb,SAAS,GAA3Ba,gBAAc,CAAD,CAAbA,CAApB,CAAoBA,CAApB;;MACA,IAAIJ,QAAQ,GAAZ,WAAA,EAA4B;QAC1BA,QAAQ,GAARA,WAAAA;MACD;IACF;EACF;;EAED,OAAO;IAAA,KAAA;IAAA,MAAA;IAAA,SAAA;IAAA,QAAA;IAAA,IAAA;IAAA,KAAA;IAAkDP;EAAlD,CAAP;AACD","sourcesContent":["import {worldToLngLat} from './web-mercator-utils';\nimport {mod, log2} from './math-utils';\n\n// defined by mapbox-gl\nconst TILE_SIZE = 512;\n\n/** Description of viewport */\nexport type ViewportProps = {\n  width: number;\n  height: number;\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  pitch?: number;\n  bearing?: number;\n};\n\n/**\n * Apply mathematical constraints to viewport props\n * @param props\n */\n// eslint-disable-next-line complexity\nexport default function normalizeViewportProps(props: ViewportProps): ViewportProps {\n  const {width, height, pitch = 0} = props;\n  let {longitude, latitude, zoom, bearing = 0} = props;\n\n  // Normalize degrees\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  // Constrain zoom and shift center at low zoom levels\n  const minZoom = log2(height / TILE_SIZE);\n  if (zoom <= minZoom) {\n    zoom = minZoom;\n    latitude = 0;\n  } else {\n    // Eliminate white space above and below the map\n    const halfHeightPixels = height / 2 / Math.pow(2, zoom);\n    const minLatitude = worldToLngLat([0, halfHeightPixels])[1];\n    if (latitude < minLatitude) {\n      latitude = minLatitude;\n    } else {\n      const maxLatitude = worldToLngLat([0, TILE_SIZE - halfHeightPixels])[1];\n      if (latitude > maxLatitude) {\n        latitude = maxLatitude;\n      }\n    }\n  }\n\n  return {width, height, longitude, latitude, zoom, pitch, bearing};\n}\n"]},"metadata":{},"sourceType":"module"}