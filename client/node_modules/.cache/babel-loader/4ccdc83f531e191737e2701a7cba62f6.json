{"ast":null,"code":"import _objectSpread from \"/home/nick/Documents/GitHub/portfolio/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/home/nick/Documents/GitHub/portfolio/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { lerp } from './math-utils';\nimport { scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat } from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\nvar EPSILON = 0.01;\nvar VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\nvar DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n};\nexport default function flyToViewport(startProps, endProps, t, options) {\n  var _getFlyToTransitionPa = getFlyToTransitionParams(startProps, endProps, options),\n      startZoom = _getFlyToTransitionPa.startZoom,\n      startCenterXY = _getFlyToTransitionPa.startCenterXY,\n      uDelta = _getFlyToTransitionPa.uDelta,\n      w0 = _getFlyToTransitionPa.w0,\n      u1 = _getFlyToTransitionPa.u1,\n      S = _getFlyToTransitionPa.S,\n      rho = _getFlyToTransitionPa.rho,\n      rho2 = _getFlyToTransitionPa.rho2,\n      r0 = _getFlyToTransitionPa.r0;\n\n  if (u1 < EPSILON) {\n    var viewport = {};\n\n    var _iterator = _createForOfIteratorHelper(VIEWPORT_TRANSITION_PROPS),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var startValue = startProps[key];\n        var endValue = endProps[key];\n        viewport[key] = lerp(startValue, endValue, t);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return viewport;\n  }\n\n  var s = t * S;\n  var w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  var u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;\n  var scaleIncrement = 1 / w;\n  var newZoom = startZoom + scaleToZoom(scaleIncrement);\n  var newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n  var newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\nexport function getFlyToDuration(startProps, endProps, options) {\n  var opts = _objectSpread(_objectSpread({}, DEFAULT_OPTS), options);\n\n  var screenSpeed = opts.screenSpeed,\n      speed = opts.speed,\n      maxDuration = opts.maxDuration;\n\n  var _getFlyToTransitionPa2 = getFlyToTransitionParams(startProps, endProps, opts),\n      S = _getFlyToTransitionPa2.S,\n      rho = _getFlyToTransitionPa2.rho;\n\n  var length = 1000 * S;\n  var duration;\n\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\nfunction getFlyToTransitionParams(startProps, endProps, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  var rho = opts.curve;\n  var startZoom = startProps.zoom;\n  var startCenter = [startProps.longitude, startProps.latitude];\n  var startScale = zoomToScale(startZoom);\n  var endZoom = endProps.zoom;\n  var endCenter = [endProps.longitude, endProps.latitude];\n  var scale = zoomToScale(endZoom - startZoom);\n  var startCenterXY = lngLatToWorld(startCenter);\n  var endCenterXY = lngLatToWorld(endCenter);\n  var uDelta = vec2.sub([], endCenterXY, startCenterXY);\n  var w0 = Math.max(startProps.width, startProps.height);\n  var w1 = w0 / scale;\n  var u1 = vec2.length(uDelta) * startScale;\n\n  var _u1 = Math.max(u1, EPSILON);\n\n  var rho2 = rho * rho;\n  var b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  var b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  var r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  var r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  var S = (r1 - r0) / rho;\n  return {\n    startZoom: startZoom,\n    startCenterXY: startCenterXY,\n    uDelta: uDelta,\n    w0: w0,\n    u1: u1,\n    S: S,\n    rho: rho,\n    rho2: rho2,\n    r0: r0,\n    r1: r1\n  };\n}","map":{"version":3,"sources":["../../src/fly-to-viewport.ts"],"names":["EPSILON","VIEWPORT_TRANSITION_PROPS","DEFAULT_OPTS","curve","speed","r0","getFlyToTransitionParams","u1","viewport","startValue","startProps","endValue","endProps","lerp","s","t","w","Math","rho","u","w0","scaleIncrement","newZoom","startZoom","scaleToZoom","newCenterWorld","vec2","newCenter","worldToLngLat","longitude","latitude","zoom","opts","options","maxDuration","length","Number","duration","screenSpeed","Object","startCenter","startScale","zoomToScale","endZoom","endCenter","scale","startCenterXY","lngLatToWorld","endCenterXY","uDelta","w1","_u1","rho2","b0","b1","r1","S"],"mappings":"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","sourcesContent":["import {lerp} from './math-utils';\nimport {scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport type {ViewportProps} from './normalize-viewport-props';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'] as const;\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\nexport type FlytoTransitionOptions = {\n  curve?: number;\n  speed?: number;\n  screenSpeed?: number;\n  maxDuration?: number;\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default function flyToViewport(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  t: number,\n  options?: FlytoTransitionOptions\n): {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n} {\n  // Equations from above paper are referred where needed.\n\n  const {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0} = getFlyToTransitionParams(\n    startProps,\n    endProps,\n    options\n  );\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    const viewport = {};\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    // @ts-expect-error properties are populated dynamically\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n\n  const newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  options?: FlytoTransitionOptions\n): number {\n  const opts = {...DEFAULT_OPTS, ...options};\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length = 1000 * S;\n  let duration: number;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  opts: FlytoTransitionOptions\n): {\n  startZoom: number;\n  startCenterXY: number[];\n  uDelta: number[];\n  w0: number;\n  u1: number;\n  S: number;\n  rho: number;\n  rho2: number;\n  r0: number;\n  r1: number;\n} {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter);\n  const endCenterXY = lngLatToWorld(endCenter);\n  const uDelta = vec2.sub([] as number[], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta) * startScale;\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"]},"metadata":{},"sourceType":"module"}