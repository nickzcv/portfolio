{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport assert from './assert';\nimport { LinearInterpolator } from './transition';\nimport MapState from './map-state';\n\nvar noop = function noop() {};\n\nexport function cropEasingFunction(easing, x0) {\n  var y0 = easing(x0);\n  return function (t) {\n    return 1 / (1 - y0) * (easing(t * (1 - x0) + x0) - y0);\n  };\n}\nexport var TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\nvar DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nvar TransitionManager = function () {\n  function TransitionManager() {\n    var _this = this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TransitionManager);\n\n    _defineProperty(this, \"_animationFrame\", null);\n\n    _defineProperty(this, \"_onTransitionFrame\", function () {\n      _this._animationFrame = requestAnimationFrame(_this._onTransitionFrame);\n\n      _this._updateViewport();\n    });\n\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n\n  _createClass(TransitionManager, [{\n    key: \"getViewportInTransition\",\n    value: function getViewportInTransition() {\n      return this._animationFrame ? this.state.propsInTransition : null;\n    }\n  }, {\n    key: \"processViewportChange\",\n    value: function processViewportChange(nextProps) {\n      var currentProps = this.props;\n      this.props = nextProps;\n\n      if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n        return false;\n      }\n\n      if (this._isTransitionEnabled(nextProps)) {\n        var startProps = Object.assign({}, currentProps);\n        var endProps = Object.assign({}, nextProps);\n\n        if (this._isTransitionInProgress()) {\n          currentProps.onTransitionInterrupt();\n\n          if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n            Object.assign(startProps, this.state.endProps);\n          } else {\n            Object.assign(startProps, this.state.propsInTransition);\n          }\n\n          if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n            var currentTime = this.time();\n            var x0 = (currentTime - this.state.startTime) / this.state.duration;\n            endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n            endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n            endProps.transitionInterpolator = startProps.transitionInterpolator;\n          }\n        }\n\n        endProps.onTransitionStart();\n\n        this._triggerTransition(startProps, endProps);\n\n        return true;\n      }\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        this._endTransition();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_isTransitionInProgress\",\n    value: function _isTransitionInProgress() {\n      return Boolean(this._animationFrame);\n    }\n  }, {\n    key: \"_isTransitionEnabled\",\n    value: function _isTransitionEnabled(props) {\n      var transitionDuration = props.transitionDuration,\n          transitionInterpolator = props.transitionInterpolator;\n      return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n    }\n  }, {\n    key: \"_isUpdateDueToCurrentTransition\",\n    value: function _isUpdateDueToCurrentTransition(props) {\n      if (this.state.propsInTransition) {\n        return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_shouldIgnoreViewportChange\",\n    value: function _shouldIgnoreViewportChange(currentProps, nextProps) {\n      if (!currentProps) {\n        return true;\n      }\n\n      if (this._isTransitionInProgress()) {\n        return this.state.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n      }\n\n      if (this._isTransitionEnabled(nextProps)) {\n        return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_triggerTransition\",\n    value: function _triggerTransition(startProps, endProps) {\n      assert(this._isTransitionEnabled(endProps));\n\n      if (this._animationFrame) {\n        cancelAnimationFrame(this._animationFrame);\n      }\n\n      var transitionInterpolator = endProps.transitionInterpolator;\n      var duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n\n      if (duration === 0) {\n        return;\n      }\n\n      var initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n      var interactionState = {\n        inTransition: true,\n        isZooming: startProps.zoom !== endProps.zoom,\n        isPanning: startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n        isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n      };\n      this.state = {\n        duration: duration,\n        easing: endProps.transitionEasing,\n        interpolator: endProps.transitionInterpolator,\n        interruption: endProps.transitionInterruption,\n        startTime: this.time(),\n        startProps: initialProps.start,\n        endProps: initialProps.end,\n        animation: null,\n        propsInTransition: {}\n      };\n\n      this._onTransitionFrame();\n\n      this.onStateChange(interactionState);\n    }\n  }, {\n    key: \"_endTransition\",\n    value: function _endTransition() {\n      if (this._animationFrame) {\n        cancelAnimationFrame(this._animationFrame);\n        this._animationFrame = null;\n      }\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n    }\n  }, {\n    key: \"_updateViewport\",\n    value: function _updateViewport() {\n      var currentTime = this.time();\n      var _this$state = this.state,\n          startTime = _this$state.startTime,\n          duration = _this$state.duration,\n          easing = _this$state.easing,\n          interpolator = _this$state.interpolator,\n          startProps = _this$state.startProps,\n          endProps = _this$state.endProps;\n      var shouldEnd = false;\n      var t = (currentTime - startTime) / duration;\n\n      if (t >= 1) {\n        t = 1;\n        shouldEnd = true;\n      }\n\n      t = easing(t);\n      var viewport = interpolator.interpolateProps(startProps, endProps, t);\n      var mapState = new MapState(Object.assign({}, this.props, viewport));\n      this.state.propsInTransition = mapState.getViewportProps();\n      this.onViewportChange(this.state.propsInTransition, this.props);\n\n      if (shouldEnd) {\n        this._endTransition();\n\n        this.props.onTransitionEnd();\n      }\n    }\n  }]);\n\n  return TransitionManager;\n}();\n\n_defineProperty(TransitionManager, \"defaultProps\", DEFAULT_PROPS);\n\nexport { TransitionManager as default };","map":{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["noop","y0","easing","t","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","UPDATE","DEFAULT_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","opts","Date","nextProps","currentProps","startProps","Object","endProps","currentTime","x0","cropEasingFunction","Boolean","props","assert","cancelAnimationFrame","duration","initialProps","interactionState","inTransition","isZooming","isPanning","isRotating","pitch","interpolator","interruption","startTime","animation","propsInTransition","requestAnimationFrame","shouldEnd","viewport","mapState"],"mappings":";;;AACA,OAAA,MAAA,MAAA,UAAA;AACA,SAAA,kBAAA,QAAA,cAAA;AACA,OAAA,QAAA,MAAA,aAAA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB,CAAA;;AAIA,OAAO,SAAA,kBAAA,CAAA,MAAA,EAAA,EAAA,EAAwC;EAC7C,IAAMC,EAAE,GAAGC,MAAM,CAAjB,EAAiB,CAAjB;EACA,OAAO,UAAA,CAAA,EAAC;IAAA,OAAK,KAAK,IAAN,EAAC,KAAiBA,MAAM,CAACC,CAAC,IAAI,IAALA,EAAC,CAADA,GAAPD,EAAM,CAANA,GAAtB,EAAK,CAAL;EAAR,CAAA;AACD;AAED,OAAO,IAAME,iBAAiB,GAAG;EAC/BC,KAAK,EAD0B,CAAA;EAE/BC,WAAW,EAFoB,CAAA;EAG/BC,MAAM,EAHyB,CAAA;EAI/BC,MAAM,EAAE;AAJuB,CAA1B;AAOP,IAAMC,aAAa,GAAG;EACpBC,kBAAkB,EADE,CAAA;EAEpBC,gBAAgB,EAAE,SAAA,gBAAA,CAAA,CAAA,EAAC;IAAA,OAAA,CAAA;EAFC,CAAA;EAGpBC,sBAAsB,EAAE,IAHJ,kBAGI,EAHJ;EAIpBC,sBAAsB,EAAET,iBAAiB,CAJrB,KAAA;EAKpBU,iBAAiB,EALG,IAAA;EAMpBC,qBAAqB,EAND,IAAA;EAOpBC,eAAe,EAAEhB;AAPG,CAAtB;;IAUqBiB,iB;EAGnB,SAAA,iBAAA,GAAuB;IAAA,IAAA,KAAA,GAAA,IAAA;;IAAA,IAAXC,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,IAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAkJF,YAAM;MAEzB,KAAI,CAAJ,eAAA,GAAuB2B,qBAAqB,CAAC,KAAI,CAAjD,kBAA4C,CAA5C;;MACA,KAAI,CAAJ,eAAA;IArJqB,CAAA,CAAA;;IACrB,KAAA,KAAA,GAAA,IAAA;IACA,KAAA,gBAAA,GAAwB3B,IAAI,CAAJA,gBAAAA,IAAxB,IAAA;IACA,KAAA,aAAA,GAAqBA,IAAI,CAAJA,aAAAA,IAArB,IAAA;IACA,KAAA,IAAA,GAAYA,IAAI,CAAJA,OAAAA,IAAgBC,IAAI,CAAhC,GAAA;EACD;;;;8CAKyB;MACxB,OAAO,KAAA,eAAA,GAAuB,KAAA,KAAA,CAAvB,iBAAA,GAAP,IAAA;IACD;;;0CAIqBC,S,EAAW;MAC/B,IAAMC,YAAY,GAAG,KAArB,KAAA;MAEA,KAAA,KAAA,GAAA,SAAA;;MAGA,IAAI,CAAA,YAAA,IAAiB,KAAA,2BAAA,CAAA,YAAA,EAArB,SAAqB,CAArB,EAAgF;QAC9E,OAAA,KAAA;MACD;;MAED,IAAI,KAAA,oBAAA,CAAJ,SAAI,CAAJ,EAA0C;QACxC,IAAMC,UAAU,GAAGC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAnB,YAAmBA,CAAnB;QACA,IAAMC,QAAQ,GAAGD,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAjB,SAAiBA,CAAjB;;QAEA,IAAI,KAAJ,uBAAI,EAAJ,EAAoC;UAClCF,YAAY,CAAZA,qBAAAA;;UAEA,IAAI,KAAA,KAAA,CAAA,YAAA,KAA4BjB,iBAAiB,CAAjD,WAAA,EAA+D;YAC7DmB,MAAM,CAANA,MAAAA,CAAAA,UAAAA,EAA0B,KAAA,KAAA,CAA1BA,QAAAA;UADF,CAAA,MAEO;YACLA,MAAM,CAANA,MAAAA,CAAAA,UAAAA,EAA0B,KAAA,KAAA,CAA1BA,iBAAAA;UACD;;UAED,IAAI,KAAA,KAAA,CAAA,YAAA,KAA4BnB,iBAAiB,CAAjD,MAAA,EAA0D;YACxD,IAAMqB,WAAW,GAAG,KAApB,IAAoB,EAApB;YACA,IAAMC,EAAE,GAAG,CAACD,WAAW,GAAG,KAAA,KAAA,CAAf,SAAA,IAAuC,KAAA,KAAA,CAAlD,QAAA;YACAD,QAAQ,CAARA,kBAAAA,GAA8B,KAAA,KAAA,CAAA,QAAA,IAAuBC,WAAW,GAAG,KAAA,KAAA,CAAnED,SAA8B,CAA9BA;YACAA,QAAQ,CAARA,gBAAAA,GAA4BG,kBAAkB,CAAC,KAAA,KAAA,CAAD,MAAA,EAA9CH,EAA8C,CAA9CA;YACAA,QAAQ,CAARA,sBAAAA,GAAkCF,UAAU,CAA5CE,sBAAAA;UACD;QACF;;QACDA,QAAQ,CAARA,iBAAAA;;QAEA,KAAA,kBAAA,CAAA,UAAA,EAAA,QAAA;;QAEA,OAAA,IAAA;MACD;;MAED,IAAI,KAAJ,uBAAI,EAAJ,EAAoC;QAClCH,YAAY,CAAZA,qBAAAA;;QACA,KAAA,cAAA;MACD;;MAED,OAAA,KAAA;IACD;;;8CAIyB;MACxB,OAAOO,OAAO,CAAC,KAAf,eAAc,CAAd;IACD;;;yCAEoBC,K,EAAO;MAAA,IACnBnB,kBADmB,GAC2BmB,KAD3B,CAAA,kBAAA;MAAA,IACCjB,sBADD,GAC2BiB,KAD3B,CAAA,sBAAA;MAE1B,OACE,CAACnB,kBAAkB,GAAlBA,CAAAA,IAA0BA,kBAAkB,KAA7C,MAAA,KAA6DkB,OAAO,CADtE,sBACsE,CADtE;IAGD;;;oDAE+BC,K,EAAO;MACrC,IAAI,KAAA,KAAA,CAAJ,iBAAA,EAAkC;QAChC,OAAO,KAAA,KAAA,CAAA,YAAA,CAAA,aAAA,CAAA,KAAA,EAA6C,KAAA,KAAA,CAApD,iBAAO,CAAP;MACD;;MACD,OAAA,KAAA;IACD;;;gDAE2BR,Y,EAAcD,S,EAAW;MACnD,IAAI,CAAJ,YAAA,EAAmB;QACjB,OAAA,IAAA;MACD;;MACD,IAAI,KAAJ,uBAAI,EAAJ,EAAoC;QAElC,OACE,KAAA,KAAA,CAAA,YAAA,KAA4BhB,iBAAiB,CAA7C,MAAA,IAEA,KAAA,+BAAA,CAHF,SAGE,CAHF;MAKD;;MACD,IAAI,KAAA,oBAAA,CAAJ,SAAI,CAAJ,EAA0C;QAExC,OAAOgB,SAAS,CAATA,sBAAAA,CAAAA,aAAAA,CAAAA,YAAAA,EAAP,SAAOA,CAAP;MACD;;MAED,OAAA,IAAA;IACD;;;uCAEkBE,U,EAAYE,Q,EAAU;MACvCM,MAAM,CAAC,KAAA,oBAAA,CAAPA,QAAO,CAAD,CAANA;;MAEA,IAAI,KAAJ,eAAA,EAA0B;QACxBC,oBAAoB,CAAC,KAArBA,eAAoB,CAApBA;MACD;;MALsC,IAQhCnB,sBARgC,GAQNY,QARM,CAAA,sBAAA;MASvC,IAAMQ,QAAQ,GAAGpB,sBAAsB,CAAtBA,WAAAA,GACbA,sBAAsB,CAAtBA,WAAAA,CAAAA,UAAAA,EADaA,QACbA,CADaA,GAEbY,QAAQ,CAFZ,kBAAA;;MAIA,IAAIQ,QAAQ,KAAZ,CAAA,EAAoB;QAClB;MACD;;MAED,IAAMC,YAAY,GAAGT,QAAQ,CAARA,sBAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAArB,QAAqBA,CAArB;MAEA,IAAMU,gBAAgB,GAAG;QACvBC,YAAY,EADW,IAAA;QAEvBC,SAAS,EAAEd,UAAU,CAAVA,IAAAA,KAAoBE,QAAQ,CAFhB,IAAA;QAGvBa,SAAS,EACPf,UAAU,CAAVA,SAAAA,KAAyBE,QAAQ,CAAjCF,SAAAA,IAA+CA,UAAU,CAAVA,QAAAA,KAAwBE,QAAQ,CAJ1D,QAAA;QAKvBc,UAAU,EAAEhB,UAAU,CAAVA,OAAAA,KAAuBE,QAAQ,CAA/BF,OAAAA,IAA2CA,UAAU,CAAVA,KAAAA,KAAqBE,QAAQ,CAACe;MAL9D,CAAzB;MAQA,KAAA,KAAA,GAAa;QAEXP,QAAQ,EAFG,QAAA;QAGX9B,MAAM,EAAEsB,QAAQ,CAHL,gBAAA;QAIXgB,YAAY,EAAEhB,QAAQ,CAJX,sBAAA;QAKXiB,YAAY,EAAEjB,QAAQ,CALX,sBAAA;QAOXkB,SAAS,EAAE,KAPA,IAOA,EAPA;QAQXpB,UAAU,EAAEW,YAAY,CARb,KAAA;QASXT,QAAQ,EAAES,YAAY,CATX,GAAA;QAUXU,SAAS,EAVE,IAAA;QAWXC,iBAAiB,EAAE;MAXR,CAAb;;MAaA,KAAA,kBAAA;;MACA,KAAA,aAAA,CAAA,gBAAA;IACD;;;qCAQgB;MACf,IAAI,KAAJ,eAAA,EAA0B;QACxBb,oBAAoB,CAAC,KAArBA,eAAoB,CAApBA;QACA,KAAA,eAAA,GAAA,IAAA;MACD;;MACD,KAAA,aAAA,CAAmB;QACjBI,YAAY,EADK,KAAA;QAEjBC,SAAS,EAFQ,KAAA;QAGjBC,SAAS,EAHQ,KAAA;QAIjBC,UAAU,EAAE;MAJK,CAAnB;IAMD;;;sCAEiB;MAEhB,IAAMb,WAAW,GAAG,KAApB,IAAoB,EAApB;MAFgB,IAAA,WAAA,GAG0D,KAH1D,KAAA;MAAA,IAGTiB,SAHS,GAAA,WAAA,CAAA,SAAA;MAAA,IAGEV,QAHF,GAAA,WAAA,CAAA,QAAA;MAAA,IAGY9B,MAHZ,GAAA,WAAA,CAAA,MAAA;MAAA,IAGoBsC,YAHpB,GAAA,WAAA,CAAA,YAAA;MAAA,IAGkClB,UAHlC,GAAA,WAAA,CAAA,UAAA;MAAA,IAG8CE,QAH9C,GAAA,WAAA,CAAA,QAAA;MAIhB,IAAIsB,SAAS,GAAb,KAAA;MACA,IAAI3C,CAAC,GAAG,CAACsB,WAAW,GAAZ,SAAA,IAAR,QAAA;;MACA,IAAItB,CAAC,IAAL,CAAA,EAAY;QACVA,CAAC,GAADA,CAAAA;QACA2C,SAAS,GAATA,IAAAA;MACD;;MACD3C,CAAC,GAAGD,MAAM,CAAVC,CAAU,CAAVA;MAEA,IAAM4C,QAAQ,GAAGP,YAAY,CAAZA,gBAAAA,CAAAA,UAAAA,EAAAA,QAAAA,EAAjB,CAAiBA,CAAjB;MAEA,IAAMQ,QAAQ,GAAG,IAAA,QAAA,CAAazB,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkB,KAAlBA,KAAAA,EAA9B,QAA8BA,CAAb,CAAjB;MACA,KAAA,KAAA,CAAA,iBAAA,GAA+ByB,QAAQ,CAAvC,gBAA+BA,EAA/B;MAEA,KAAA,gBAAA,CAAsB,KAAA,KAAA,CAAtB,iBAAA,EAAoD,KAApD,KAAA;;MAEA,IAAA,SAAA,EAAe;QACb,KAAA,cAAA;;QACA,KAAA,KAAA,CAAA,eAAA;MACD;IACF;;;;;;gBA/LkB/B,iB,kBACGR,a;;SADHQ,iB","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\n// crops the old easing function from x0 to 1 where x0 is the interruption point\n// returns a new easing function with domain [0, 1] and range [0, 1]\nexport function cropEasingFunction(easing, x0) {\n  const y0 = easing(x0);\n  return t => (1 / (1 - y0)) * (easing(t * (1 - x0) + x0) - y0);\n}\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  static defaultProps = DEFAULT_PROPS;\n\n  constructor(opts = {}) {\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n\n  _animationFrame = null;\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this._animationFrame ? this.state.propsInTransition : null;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps);\n      const endProps = Object.assign({}, nextProps);\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n          Object.assign(startProps, this.state.endProps);\n        } else {\n          Object.assign(startProps, this.state.propsInTransition);\n        }\n\n        if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n          const currentTime = this.time();\n          const x0 = (currentTime - this.state.startTime) / this.state.duration;\n          endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n          endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n          endProps.transitionInterpolator = startProps.transitionInterpolator;\n        }\n      }\n      endProps.onTransitionStart();\n\n      this._triggerTransition(startProps, endProps);\n\n      return true;\n    }\n\n    if (this._isTransitionInProgress()) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return false;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this._animationFrame);\n  }\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (!currentProps) {\n      return true;\n    }\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps));\n\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n    }\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning:\n        startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: this.time(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n    this._onTransitionFrame();\n    this.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame = () => {\n    // _updateViewport() may cancel the animation\n    this._animationFrame = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  };\n\n  _endTransition() {\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n    this.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = this.time();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.onViewportChange(this.state.propsInTransition, this.props);\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}