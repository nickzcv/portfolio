{"ast":null,"code":"import { whichButtons, getOffsetPosition } from './event-utils';\nconst DEFAULT_OPTIONS = {\n  srcElement: 'root',\n  priority: 0\n};\nexport default class EventRegistrar {\n  constructor(eventManager) {\n    /**\n     * Handles hammerjs event\n     */\n    this.handleEvent = event => {\n      if (this.isEmpty()) {\n        return;\n      }\n\n      const mjolnirEvent = this._normalizeEvent(event);\n\n      let target = event.srcEvent.target;\n\n      while (target && target !== mjolnirEvent.rootElement) {\n        this._emit(mjolnirEvent, target);\n\n        if (mjolnirEvent.handled) {\n          return;\n        }\n\n        target = target.parentNode;\n      }\n\n      this._emit(mjolnirEvent, 'root');\n    };\n\n    this.eventManager = eventManager;\n    this.handlers = []; // Element -> handler map\n\n    this.handlersByElement = new Map();\n    this._active = false;\n  } // Returns true if there are no non-passive handlers\n\n\n  isEmpty() {\n    return !this._active;\n  }\n\n  add(type, handler, options) {\n    let once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let passive = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const {\n      handlers,\n      handlersByElement\n    } = this;\n    let opts = DEFAULT_OPTIONS;\n\n    if (typeof options === 'string' || options && options.addEventListener) {\n      // is DOM element, backward compatibility\n      // @ts-ignore\n      opts = { ...DEFAULT_OPTIONS,\n        srcElement: options\n      };\n    } else if (options) {\n      opts = { ...DEFAULT_OPTIONS,\n        ...options\n      };\n    }\n\n    let entries = handlersByElement.get(opts.srcElement);\n\n    if (!entries) {\n      entries = [];\n      handlersByElement.set(opts.srcElement, entries);\n    }\n\n    const entry = {\n      type,\n      handler,\n      srcElement: opts.srcElement,\n      priority: opts.priority\n    };\n\n    if (once) {\n      entry.once = true;\n    }\n\n    if (passive) {\n      entry.passive = true;\n    }\n\n    handlers.push(entry);\n    this._active = this._active || !entry.passive; // Sort handlers by descending priority\n    // Handlers with the same priority are excuted in the order of registration\n\n    let insertPosition = entries.length - 1;\n\n    while (insertPosition >= 0) {\n      if (entries[insertPosition].priority >= entry.priority) {\n        break;\n      }\n\n      insertPosition--;\n    }\n\n    entries.splice(insertPosition + 1, 0, entry);\n  }\n\n  remove(type, handler) {\n    const {\n      handlers,\n      handlersByElement\n    } = this;\n\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const entry = handlers[i];\n\n      if (entry.type === type && entry.handler === handler) {\n        handlers.splice(i, 1);\n        const entries = handlersByElement.get(entry.srcElement);\n        entries.splice(entries.indexOf(entry), 1);\n\n        if (entries.length === 0) {\n          handlersByElement.delete(entry.srcElement);\n        }\n      }\n    }\n\n    this._active = handlers.some(entry => !entry.passive);\n  }\n  /**\n   * Invoke handlers on a particular element\n   */\n\n\n  _emit(event, srcElement) {\n    const entries = this.handlersByElement.get(srcElement);\n\n    if (entries) {\n      let immediatePropagationStopped = false; // Prevents the current event from bubbling up\n\n      const stopPropagation = () => {\n        event.handled = true;\n      }; // Prevent any remaining listeners from being called\n\n\n      const stopImmediatePropagation = () => {\n        event.handled = true;\n        immediatePropagationStopped = true;\n      };\n\n      const entriesToRemove = [];\n\n      for (let i = 0; i < entries.length; i++) {\n        const {\n          type,\n          handler,\n          once\n        } = entries[i];\n        handler({ ...event,\n          // @ts-ignore\n          type,\n          stopPropagation,\n          stopImmediatePropagation\n        });\n\n        if (once) {\n          entriesToRemove.push(entries[i]);\n        }\n\n        if (immediatePropagationStopped) {\n          break;\n        }\n      }\n\n      for (let i = 0; i < entriesToRemove.length; i++) {\n        const {\n          type,\n          handler\n        } = entriesToRemove[i];\n        this.remove(type, handler);\n      }\n    }\n  }\n  /**\n   * Normalizes hammerjs and custom events to have predictable fields.\n   */\n\n\n  _normalizeEvent(event) {\n    const rootElement = this.eventManager.getElement();\n    return { ...event,\n      ...whichButtons(event),\n      ...getOffsetPosition(event, rootElement),\n      preventDefault: () => {\n        event.srcEvent.preventDefault();\n      },\n      stopImmediatePropagation: null,\n      stopPropagation: null,\n      handled: false,\n      rootElement\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils/event-registrar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { whichButtons, getOffsetPosition } from './event-utils';\nconst DEFAULT_OPTIONS = {\n    srcElement: 'root',\n    priority: 0\n};\nexport default class EventRegistrar {\n    constructor(eventManager) {\n        /**\n         * Handles hammerjs event\n         */\n        this.handleEvent = (event) => {\n            if (this.isEmpty()) {\n                return;\n            }\n            const mjolnirEvent = this._normalizeEvent(event);\n            let target = event.srcEvent.target;\n            while (target && target !== mjolnirEvent.rootElement) {\n                this._emit(mjolnirEvent, target);\n                if (mjolnirEvent.handled) {\n                    return;\n                }\n                target = target.parentNode;\n            }\n            this._emit(mjolnirEvent, 'root');\n        };\n        this.eventManager = eventManager;\n        this.handlers = [];\n        // Element -> handler map\n        this.handlersByElement = new Map();\n        this._active = false;\n    }\n    // Returns true if there are no non-passive handlers\n    isEmpty() {\n        return !this._active;\n    }\n    add(type, handler, options, once = false, passive = false) {\n        const { handlers, handlersByElement } = this;\n        let opts = DEFAULT_OPTIONS;\n        if (typeof options === 'string' || (options && options.addEventListener)) {\n            // is DOM element, backward compatibility\n            // @ts-ignore\n            opts = { ...DEFAULT_OPTIONS, srcElement: options };\n        }\n        else if (options) {\n            opts = { ...DEFAULT_OPTIONS, ...options };\n        }\n        let entries = handlersByElement.get(opts.srcElement);\n        if (!entries) {\n            entries = [];\n            handlersByElement.set(opts.srcElement, entries);\n        }\n        const entry = {\n            type,\n            handler,\n            srcElement: opts.srcElement,\n            priority: opts.priority\n        };\n        if (once) {\n            entry.once = true;\n        }\n        if (passive) {\n            entry.passive = true;\n        }\n        handlers.push(entry);\n        this._active = this._active || !entry.passive;\n        // Sort handlers by descending priority\n        // Handlers with the same priority are excuted in the order of registration\n        let insertPosition = entries.length - 1;\n        while (insertPosition >= 0) {\n            if (entries[insertPosition].priority >= entry.priority) {\n                break;\n            }\n            insertPosition--;\n        }\n        entries.splice(insertPosition + 1, 0, entry);\n    }\n    remove(type, handler) {\n        const { handlers, handlersByElement } = this;\n        for (let i = handlers.length - 1; i >= 0; i--) {\n            const entry = handlers[i];\n            if (entry.type === type && entry.handler === handler) {\n                handlers.splice(i, 1);\n                const entries = handlersByElement.get(entry.srcElement);\n                entries.splice(entries.indexOf(entry), 1);\n                if (entries.length === 0) {\n                    handlersByElement.delete(entry.srcElement);\n                }\n            }\n        }\n        this._active = handlers.some(entry => !entry.passive);\n    }\n    /**\n     * Invoke handlers on a particular element\n     */\n    _emit(event, srcElement) {\n        const entries = this.handlersByElement.get(srcElement);\n        if (entries) {\n            let immediatePropagationStopped = false;\n            // Prevents the current event from bubbling up\n            const stopPropagation = () => {\n                event.handled = true;\n            };\n            // Prevent any remaining listeners from being called\n            const stopImmediatePropagation = () => {\n                event.handled = true;\n                immediatePropagationStopped = true;\n            };\n            const entriesToRemove = [];\n            for (let i = 0; i < entries.length; i++) {\n                const { type, handler, once } = entries[i];\n                handler({\n                    ...event,\n                    // @ts-ignore\n                    type,\n                    stopPropagation,\n                    stopImmediatePropagation\n                });\n                if (once) {\n                    entriesToRemove.push(entries[i]);\n                }\n                if (immediatePropagationStopped) {\n                    break;\n                }\n            }\n            for (let i = 0; i < entriesToRemove.length; i++) {\n                const { type, handler } = entriesToRemove[i];\n                this.remove(type, handler);\n            }\n        }\n    }\n    /**\n     * Normalizes hammerjs and custom events to have predictable fields.\n     */\n    _normalizeEvent(event) {\n        const rootElement = this.eventManager.getElement();\n        return {\n            ...event,\n            ...whichButtons(event),\n            ...getOffsetPosition(event, rootElement),\n            preventDefault: () => {\n                event.srcEvent.preventDefault();\n            },\n            stopImmediatePropagation: null,\n            stopPropagation: null,\n            handled: false,\n            rootElement\n        };\n    }\n}\n//# sourceMappingURL=event-registrar.js.map"]},"metadata":{},"sourceType":"module"}