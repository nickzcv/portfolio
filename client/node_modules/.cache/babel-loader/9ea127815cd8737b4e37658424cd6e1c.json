{"ast":null,"code":"/* Constants */\nvar DOWN_EVENT = 1;\nvar MOVE_EVENT = 2;\nvar UP_EVENT = 4;\nvar MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n}; // MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\n\nvar MOUSE_EVENT_WHICH_LEFT = 1;\nvar MOUSE_EVENT_WHICH_MIDDLE = 2;\nvar MOUSE_EVENT_WHICH_RIGHT = 3; // MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n\nvar MOUSE_EVENT_BUTTON_LEFT = 0;\nvar MOUSE_EVENT_BUTTON_MIDDLE = 1;\nvar MOUSE_EVENT_BUTTON_RIGHT = 2; // MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n\nvar MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nvar MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nvar MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n/**\n * Extract the involved mouse button\n */\n\nexport function whichButtons(event) {\n  var eventType = MOUSE_EVENTS[event.srcEvent.type];\n\n  if (!eventType) {\n    // Not a mouse evet\n    return null;\n  }\n\n  var _event$srcEvent = event.srcEvent,\n      buttons = _event$srcEvent.buttons,\n      button = _event$srcEvent.button,\n      which = _event$srcEvent.which;\n  var leftButton = false;\n  var middleButton = false;\n  var rightButton = false;\n\n  if ( // button is up, need to find out which one was pressed before\n  eventType === UP_EVENT || // moving but does not support `buttons` API\n  eventType === MOVE_EVENT && !Number.isFinite(buttons)) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n\n  return {\n    leftButton: leftButton,\n    middleButton: middleButton,\n    rightButton: rightButton\n  };\n}\n/**\n * Calculate event position relative to the root element\n */\n\nexport function getOffsetPosition(event, rootElement) {\n  var center = event.center; // `center` is a hammer.js event property\n\n  if (!center) {\n    // Not a gestural event\n    return null;\n  }\n\n  var rect = rootElement.getBoundingClientRect(); // Fix scale for map affected by a CSS transform.\n  // See https://stackoverflow.com/a/26893663/3528533\n\n  var scaleX = rect.width / rootElement.offsetWidth || 1;\n  var scaleY = rect.height / rootElement.offsetHeight || 1; // Calculate center relative to the root element\n\n  var offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n  return {\n    center: center,\n    offsetCenter: offsetCenter\n  };\n}","map":{"version":3,"sources":["../../../src/utils/event-utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* Constants */\nconst DOWN_EVENT = 1;\nconst MOVE_EVENT = 2;\nconst UP_EVENT = 4;\nconst MOUSE_EVENTS = {\n    pointerdown: DOWN_EVENT,\n    pointermove: MOVE_EVENT,\n    pointerup: UP_EVENT,\n    mousedown: DOWN_EVENT,\n    mousemove: MOVE_EVENT,\n    mouseup: UP_EVENT\n};\n// MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\nconst MOUSE_EVENT_WHICH_LEFT = 1;\nconst MOUSE_EVENT_WHICH_MIDDLE = 2;\nconst MOUSE_EVENT_WHICH_RIGHT = 3;\n// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\nconst MOUSE_EVENT_BUTTON_LEFT = 0;\nconst MOUSE_EVENT_BUTTON_MIDDLE = 1;\nconst MOUSE_EVENT_BUTTON_RIGHT = 2;\n// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\nconst MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nconst MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nconst MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n/**\n * Extract the involved mouse button\n */\nexport function whichButtons(event) {\n    const eventType = MOUSE_EVENTS[event.srcEvent.type];\n    if (!eventType) {\n        // Not a mouse evet\n        return null;\n    }\n    const { buttons, button, which } = event.srcEvent;\n    let leftButton = false;\n    let middleButton = false;\n    let rightButton = false;\n    if (\n    // button is up, need to find out which one was pressed before\n    eventType === UP_EVENT ||\n        // moving but does not support `buttons` API\n        (eventType === MOVE_EVENT && !Number.isFinite(buttons))) {\n        leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n        middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n        rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n    }\n    else if (eventType === MOVE_EVENT) {\n        leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n        middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n        rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n    }\n    else if (eventType === DOWN_EVENT) {\n        leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n        middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n        rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n    }\n    return { leftButton, middleButton, rightButton };\n}\n/**\n * Calculate event position relative to the root element\n */\nexport function getOffsetPosition(event, rootElement) {\n    const center = event.center;\n    // `center` is a hammer.js event property\n    if (!center) {\n        // Not a gestural event\n        return null;\n    }\n    const rect = rootElement.getBoundingClientRect();\n    // Fix scale for map affected by a CSS transform.\n    // See https://stackoverflow.com/a/26893663/3528533\n    const scaleX = rect.width / rootElement.offsetWidth || 1;\n    const scaleY = rect.height / rootElement.offsetHeight || 1;\n    // Calculate center relative to the root element\n    const offsetCenter = {\n        x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n        y: (center.y - rect.top - rootElement.clientTop) / scaleY\n    };\n    return { center, offsetCenter };\n}\n//# sourceMappingURL=event-utils.js.map"]},"metadata":{},"sourceType":"module"}