{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nconst {\n  KEY_EVENTS\n} = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n\n    this.handleEvent = event => {\n      // Ignore if focused on text input\n      const targetElement = event.target || event.srcElement;\n\n      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n        return;\n      }\n\n      if (this.enableDownEvent && event.type === 'keydown') {\n        this.callback({\n          type: DOWN_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n\n      if (this.enableUpEvent && event.type === 'keyup') {\n        this.callback({\n          type: UP_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n    };\n\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n    this.events = (this.options.events || []).concat(KEY_EVENTS);\n    element.tabIndex = this.options.tabIndex || 0;\n    element.style.outline = 'none';\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n\n\n  enableEventType(eventType, enabled) {\n    if (eventType === DOWN_EVENT_TYPE) {\n      this.enableDownEvent = enabled;\n    }\n\n    if (eventType === UP_EVENT_TYPE) {\n      this.enableUpEvent = enabled;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/inputs/key-input.ts"],"names":[],"mappings":"AACA,OAAO,KAAP,MAAkC,SAAlC;AAEA,SAAQ,iBAAR,QAAgC,cAAhC;AAEA,MAAM;EAAC;AAAD,IAAe,iBAArB;AACA,MAAM,eAAe,GAAG,SAAxB;AACA,MAAM,aAAa,GAAG,OAAtB;AAOA,eAAc,MAAO,QAAP,SAAwB,KAAxB,CAAkE;EAM9E,WAAA,CACE,OADF,EAEE,QAFF,EAGE,OAHF,EAG0B;IAExB,MAAM,OAAN,EAAe,QAAf,EAAyB,OAAzB;;IA6BF,KAAA,WAAA,GAAe,KAAD,IAAyB;MACrC;MACA,MAAM,aAAa,GAAI,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,UAA7C;;MACA,IACG,aAAa,CAAC,OAAd,KAA0B,OAA1B,IAAsC,aAAkC,CAAC,IAAnC,KAA4C,MAAnF,IACA,aAAa,CAAC,OAAd,KAA0B,UAF5B,EAGE;QACA;MACD;;MAED,IAAI,KAAK,eAAL,IAAwB,KAAK,CAAC,IAAN,KAAe,SAA3C,EAAsD;QACpD,KAAK,QAAL,CAAc;UACZ,IAAI,EAAE,eADM;UAEZ,QAAQ,EAAE,KAFE;UAGZ,GAAG,EAAE,KAAK,CAAC,GAHC;UAIZ,MAAM,EAAE,KAAK,CAAC;QAJF,CAAd;MAMD;;MAED,IAAI,KAAK,aAAL,IAAsB,KAAK,CAAC,IAAN,KAAe,OAAzC,EAAkD;QAChD,KAAK,QAAL,CAAc;UACZ,IAAI,EAAE,aADM;UAEZ,QAAQ,EAAE,KAFE;UAGZ,GAAG,EAAE,KAAK,CAAC,GAHC;UAIZ,MAAM,EAAE,KAAK,CAAC;QAJF,CAAd;MAMD;IACF,CA3BD;;IA3BE,KAAK,eAAL,GAAuB,KAAK,OAAL,CAAa,MAApC;IACA,KAAK,aAAL,GAAqB,KAAK,OAAL,CAAa,MAAlC;IAEA,KAAK,MAAL,GAAc,CAAC,KAAK,OAAL,CAAa,MAAb,IAAuB,EAAxB,EAA4B,MAA5B,CAAmC,UAAnC,CAAd;IAEA,OAAO,CAAC,QAAR,GAAmB,KAAK,OAAL,CAAa,QAAb,IAAyB,CAA5C;IACA,OAAO,CAAC,KAAR,CAAc,OAAd,GAAwB,MAAxB;IACA,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,IAAI,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAgC,KAAK,WAArC,CAA7B;EACD;;EAED,OAAO,GAAA;IACL,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,IAAI,KAAK,OAAL,CAAa,mBAAb,CAAiC,KAAjC,EAAwC,KAAK,WAA7C,CAA7B;EACD;EAED;;;AAGG;;;EACH,eAAe,CAAC,SAAD,EAAoB,OAApB,EAAoC;IACjD,IAAI,SAAS,KAAK,eAAlB,EAAmC;MACjC,KAAK,eAAL,GAAuB,OAAvB;IACD;;IACD,IAAI,SAAS,KAAK,aAAlB,EAAiC;MAC/B,KAAK,aAAL,GAAqB,OAArB;IACD;EACF;;AAtC6E","sourceRoot":"","sourcesContent":["import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nconst { KEY_EVENTS } = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput extends Input {\n    constructor(element, callback, options) {\n        super(element, callback, options);\n        this.handleEvent = (event) => {\n            // Ignore if focused on text input\n            const targetElement = (event.target || event.srcElement);\n            if ((targetElement.tagName === 'INPUT' && targetElement.type === 'text') ||\n                targetElement.tagName === 'TEXTAREA') {\n                return;\n            }\n            if (this.enableDownEvent && event.type === 'keydown') {\n                this.callback({\n                    type: DOWN_EVENT_TYPE,\n                    srcEvent: event,\n                    key: event.key,\n                    target: event.target\n                });\n            }\n            if (this.enableUpEvent && event.type === 'keyup') {\n                this.callback({\n                    type: UP_EVENT_TYPE,\n                    srcEvent: event,\n                    key: event.key,\n                    target: event.target\n                });\n            }\n        };\n        this.enableDownEvent = this.options.enable;\n        this.enableUpEvent = this.options.enable;\n        this.events = (this.options.events || []).concat(KEY_EVENTS);\n        element.tabIndex = this.options.tabIndex || 0;\n        element.style.outline = 'none';\n        this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n    }\n    destroy() {\n        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n    enableEventType(eventType, enabled) {\n        if (eventType === DOWN_EVENT_TYPE) {\n            this.enableDownEvent = enabled;\n        }\n        if (eventType === UP_EVENT_TYPE) {\n            this.enableUpEvent = enabled;\n        }\n    }\n}\n//# sourceMappingURL=key-input.js.map"]},"metadata":{},"sourceType":"module"}