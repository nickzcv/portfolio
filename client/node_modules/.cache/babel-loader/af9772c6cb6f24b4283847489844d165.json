{"ast":null,"code":"import Input from './input';\nconst EVENT_TYPE = 'contextmenu';\nexport default class ContextmenuInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n\n\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/inputs/contextmenu-input.ts"],"names":[],"mappings":"AACA,OAAO,KAAP,MAAkC,SAAlC;AAEA,MAAM,UAAU,GAAG,aAAnB;AAEA,eAAc,MAAO,gBAAP,SAAgC,KAAhC,CAA2E;EACvF,WAAA,CACE,OADF,EAEE,QAFF,EAGE,OAHF,EAGuB;IAErB,MAAM,OAAN,EAAe,QAAf,EAAyB,OAAzB;;IAmBF,KAAA,WAAA,GAAe,KAAD,IAAsB;MAClC,IAAI,CAAC,KAAK,OAAL,CAAa,MAAlB,EAA0B;QACxB;MACD;;MAED,KAAK,QAAL,CAAc;QACZ,IAAI,EAAE,UADM;QAEZ,MAAM,EAAE;UACN,CAAC,EAAE,KAAK,CAAC,OADH;UAEN,CAAC,EAAE,KAAK,CAAC;QAFH,CAFI;QAMZ,QAAQ,EAAE,KANE;QAOZ,WAAW,EAAE,OAPD;QAQZ,MAAM,EAAE,KAAK,CAAC;MARF,CAAd;IAUD,CAfD;;IAjBE,OAAO,CAAC,gBAAR,CAAyB,aAAzB,EAAwC,KAAK,WAA7C;EACD;;EAED,OAAO,GAAA;IACL,KAAK,OAAL,CAAa,mBAAb,CAAiC,aAAjC,EAAgD,KAAK,WAArD;EACD;EAED;;;AAGG;;;EACH,eAAe,CAAC,SAAD,EAAoB,OAApB,EAAoC;IACjD,IAAI,SAAS,KAAK,UAAlB,EAA8B;MAC5B,KAAK,OAAL,CAAa,MAAb,GAAsB,OAAtB;IACD;EACF;;AAvBsF","sourceRoot":"","sourcesContent":["import Input from './input';\nconst EVENT_TYPE = 'contextmenu';\nexport default class ContextmenuInput extends Input {\n    constructor(element, callback, options) {\n        super(element, callback, options);\n        this.handleEvent = (event) => {\n            if (!this.options.enable) {\n                return;\n            }\n            this.callback({\n                type: EVENT_TYPE,\n                center: {\n                    x: event.clientX,\n                    y: event.clientY\n                },\n                srcEvent: event,\n                pointerType: 'mouse',\n                target: event.target\n            });\n        };\n        element.addEventListener('contextmenu', this.handleEvent);\n    }\n    destroy() {\n        this.element.removeEventListener('contextmenu', this.handleEvent);\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n    enableEventType(eventType, enabled) {\n        if (eventType === EVENT_TYPE) {\n            this.options.enable = enabled;\n        }\n    }\n}\n//# sourceMappingURL=contextmenu-input.js.map"]},"metadata":{},"sourceType":"module"}