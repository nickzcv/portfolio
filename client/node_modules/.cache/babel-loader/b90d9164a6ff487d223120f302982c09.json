{"ast":null,"code":"import { createMat4, transformVector, clamp, log2 } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nexport const MAX_LATITUDE = 85.051129;\nexport const DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\nexport function lngLatToWorld(lngLat) {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = TILE_SIZE * (lambda2 + PI) / (2 * PI);\n  const y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(xy) {\n  const [x, y] = xy;\n  const lambda2 = x / TILE_SIZE * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(options) {\n  const {\n    latitude\n  } = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function unitsPerMeter(latitude) {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\nexport function getDistanceScales(options) {\n  const {\n    latitude,\n    longitude,\n    highPrecision = false\n  } = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  const result = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;\n    const altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n  const {\n    unitsPerMeter,\n    unitsPerMeter2\n  } = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(options) {\n  const {\n    height,\n    pitch,\n    bearing,\n    altitude,\n    scale,\n    center\n  } = options;\n  const vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\nexport function getProjectionParameters(options) {\n  const {\n    width,\n    height,\n    altitude,\n    pitch = 0,\n    offset,\n    center,\n    scale,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = options;\n  let {\n    fovy = altitudeToFovy(DEFAULT_ALTITUDE)\n  } = options;\n\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  const fovRadians = fovy * DEGREES_TO_RADIANS;\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const focalDistance = fovyToAltitude(fovy);\n  let cameraToSeaLevelDistance = focalDistance;\n\n  if (center) {\n    cameraToSeaLevelDistance += center[2] * scale / Math.cos(pitchRadians) / height;\n  }\n\n  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n  const topHalfSurfaceDistance = Math.sin(fovAboveCenter) * cameraToSeaLevelDistance / Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n  const furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  const horizonDistance = cameraToSeaLevelDistance * 10;\n  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\nexport function getProjectionMatrix(options) {\n  const {\n    fov,\n    aspect,\n    near,\n    far\n  } = getProjectionParameters(options);\n  const projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  let targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"sources":["../../src/web-mercator-utils.ts"],"names":["PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","MAX_LATITUDE","DEFAULT_ALTITUDE","log2","assert","Number","lat","lambda2","lng","phi2","x","y","latitude","latCosine","scaleToZoom","highPrecision","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","result","unitsPerMeter","metersPerUnit","unitsPerDegree","degreesPerUnit","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerMeter2","getDistanceScales","worldspace","lngLatToWorld","newLngLat","worldToLngLat","newZ","z0","z","center","vm","createMat4","mat4","bearing","relativeScale","scale","vec3","pitch","nearZMultiplier","farZMultiplier","fovy","altitudeToFovy","altitude","fovRadians","pitchRadians","focalDistance","fovyToAltitude","cameraToSeaLevelDistance","fovAboveCenter","offset","topHalfSurfaceDistance","clamp","furthestDistance","horizonDistance","farZ","fov","aspect","width","near","far","getProjectionParameters","projectionMatrix","transformVector","targetZ","coord","coord0","coord1","z1","t","vec2"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, clamp, log2} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\nexport type DistanceScales = {\n  unitsPerMeter: number[];\n  metersPerUnit: number[];\n  unitsPerMeter2?: number[];\n  unitsPerDegree: number[];\n  degreesPerUnit: number[];\n  unitsPerDegree2?: number[];\n};\n\n/**\n * PROJECTION MATRIX PARAMETERS\n *\n * TODO how to document mebers\n * @param fov in radians. fov is variable, depends on pitch and altitude\n * @param aspect width/height\n * @param focalDistance distance at which visual scale factor is 1\n * @param near near clipping plane\n * @param far far clipping plane\n */\ntype ProjectionParameters = {\n  fov: number;\n  aspect: number;\n  focalDistance: number;\n  near: number;\n  far: number;\n};\n\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom: number): number {\n  return Math.pow(2, zoom);\n}\n\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale: number): number {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat: number[]): [number, number] {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy: number[]): [number, number] {\n  const [x, y] = xy;\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options: {latitude: number}): number {\n  const {latitude} = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate the conversion from meter to common units at a given latitude\n * This is a cheaper version of `getDistanceScales`\n * @param latitude center latitude in degrees\n * @returns common units per meter\n */\nexport function unitsPerMeter(latitude: number): number {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options: {\n  latitude: number;\n  longitude: number;\n  highPrecision?: boolean;\n}): DistanceScales {\n  const {latitude, longitude, highPrecision = false} = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  const result: DistanceScales = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options: {\n  // Viewport props\n  height: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  // Pre-calculated parameters\n  scale: number;\n  center?: number[];\n}): number[] {\n  const {\n    // Viewport props\n    height,\n    pitch,\n    bearing,\n    altitude,\n    // Pre-calculated parameters\n    scale,\n    center\n  } = options;\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options: {\n  width: number;\n  height: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  pitch?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n}): ProjectionParameters {\n  const {\n    width,\n    height,\n    altitude,\n    pitch = 0,\n    offset,\n    center,\n    scale,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = options;\n  let {fovy = altitudeToFovy(DEFAULT_ALTITUDE)} = options;\n\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  const fovRadians = fovy * DEGREES_TO_RADIANS;\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n\n  // Distance from camera to the target\n  const focalDistance = fovyToAltitude(fovy);\n\n  let cameraToSeaLevelDistance = focalDistance;\n\n  if (center) {\n    cameraToSeaLevelDistance += (center[2] * scale) / Math.cos(pitchRadians) / height;\n  }\n\n  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const topHalfSurfaceDistance =\n    (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /\n    Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n\n  // Calculate z distance of the farthest fragment that should be rendered.\n  const furthestDistance =\n    Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  // Matches mapbox limit\n  const horizonDistance = cameraToSeaLevelDistance * 10;\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\n\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options: {\n  width: number;\n  height: number;\n  pitch: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  nearZMultiplier: number;\n  farZMultiplier: number;\n}): number[] {\n  const {fov, aspect, near, far} = getProjectionParameters(options);\n\n  const projectionMatrix = mat4.perspective(\n    [] as number[],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude: number): number {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy: number): number {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param pixelProjectionMatrix - projection matrix 4x4\n * @return [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[];\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[] {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(\n  xyz: number[],\n  pixelUnprojectionMatrix: number[],\n  targetZ: number = 0\n): number[] {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([] as number[], coord0, coord1, t);\n}\n"]},"metadata":{},"sourceType":"module"}