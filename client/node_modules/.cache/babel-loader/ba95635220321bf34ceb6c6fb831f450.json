{"ast":null,"code":"/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n\n/* eslint-disable */\n\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\n\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/* eslint-disable no-invalid-this */\n\n\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler; // overrides PointerEventInput.handler to accept right mouse button\n\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store; // Allow non-left mouse buttons through\n\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n} // overrides MouseInput.handler to accept right mouse button\n\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the mouse button down\n\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    } // mouse must be down\n\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/utils/hammer-overrides.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AACH;;AAEA;AACA,MAAM,WAAW,GAAG,CAApB;AACA,MAAM,UAAU,GAAG,CAAnB;AACA,MAAM,SAAS,GAAG,CAAlB;AACA,MAAM,eAAe,GAAG;EACtB,SAAS,EAAE,WADW;EAEtB,SAAS,EAAE,UAFW;EAGtB,OAAO,EAAE;AAHa,CAAxB;AAMA;;;;;AAKG;;AACH,SAAS,IAAT,CAAc,KAAd,EAAqB,OAArB,EAA4B;EAC1B,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;IACrC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAD,CAAN,CAAX,EAAuB;MACrB,OAAO,IAAP;IACD;EACF;;EACD,OAAO,KAAP;AACD;AAED;;;AACA,OAAM,SAAU,wBAAV,CAAmC,iBAAnC,EAAoD;EACxD,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAlB,CAA4B,OAA/C,CADwD,CAGxD;;EACA,iBAAiB,CAAC,SAAlB,CAA4B,OAA5B,GAAsC,SAAS,OAAT,CAAiB,EAAjB,EAAmB;IACvD,MAAM,KAAK,GAAG,KAAK,KAAnB,CADuD,CAGvD;;IACA,IAAI,EAAE,CAAC,MAAH,GAAY,CAAZ,IAAiB,EAAE,CAAC,IAAH,KAAY,aAAjC,EAAgD;MAC9C,IAAI,CAAC,IAAI,CAAC,KAAD,EAAQ,CAAC,IAAI,CAAC,CAAC,SAAF,KAAgB,EAAE,CAAC,SAAhC,CAAT,EAAqD;QACnD,KAAK,CAAC,IAAN,CAAW,EAAX;MACD;IACF;;IAED,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAAsB,EAAtB;EACD,CAXD;AAYD,C,CAED;;AACA,OAAM,SAAU,iBAAV,CAA4B,UAA5B,EAAsC;EAC1C,UAAU,CAAC,SAAX,CAAqB,OAArB,GAA+B,SAAS,OAAT,CAAiB,EAAjB,EAAmB;IAChD,IAAI,SAAS,GAAG,eAAe,CAAC,EAAE,CAAC,IAAJ,CAA/B,CADgD,CAGhD;;IACA,IAAI,SAAS,GAAG,WAAZ,IAA2B,EAAE,CAAC,MAAH,IAAa,CAA5C,EAA+C;MAC7C,KAAK,OAAL,GAAe,IAAf;IACD;;IAED,IAAI,SAAS,GAAG,UAAZ,IAA0B,EAAE,CAAC,KAAH,KAAa,CAA3C,EAA8C;MAC5C,SAAS,GAAG,SAAZ;IACD,CAV+C,CAYhD;;;IACA,IAAI,CAAC,KAAK,OAAV,EAAmB;MACjB;IACD;;IAED,IAAI,SAAS,GAAG,SAAhB,EAA2B;MACzB,KAAK,OAAL,GAAe,KAAf;IACD;;IAED,KAAK,QAAL,CAAc,KAAK,OAAnB,EAA4B,SAA5B,EAAuC;MACrC,QAAQ,EAAE,CAAC,EAAD,CAD2B;MAErC,eAAe,EAAE,CAAC,EAAD,CAFoB;MAGrC,WAAW,EAAE,OAHwB;MAIrC,QAAQ,EAAE;IAJ2B,CAAvC;EAMD,CA3BD;AA4BD","sourceRoot":"","sourcesContent":["/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n/* eslint-disable */\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n    for (let i = 0; i < array.length; i++) {\n        if (predict(array[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n    const oldHandler = PointerEventInput.prototype.handler;\n    // overrides PointerEventInput.handler to accept right mouse button\n    PointerEventInput.prototype.handler = function handler(ev) {\n        const store = this.store;\n        // Allow non-left mouse buttons through\n        if (ev.button > 0 && ev.type === 'pointerdown') {\n            if (!some(store, e => e.pointerId === ev.pointerId)) {\n                store.push(ev);\n            }\n        }\n        oldHandler.call(this, ev);\n    };\n}\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n    MouseInput.prototype.handler = function handler(ev) {\n        let eventType = MOUSE_INPUT_MAP[ev.type];\n        // on start we want to have the mouse button down\n        if (eventType & INPUT_START && ev.button >= 0) {\n            this.pressed = true;\n        }\n        if (eventType & INPUT_MOVE && ev.which === 0) {\n            eventType = INPUT_END;\n        }\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: 'mouse',\n            srcEvent: ev\n        });\n    };\n}\n//# sourceMappingURL=hammer-overrides.js.map"]},"metadata":{},"sourceType":"module"}