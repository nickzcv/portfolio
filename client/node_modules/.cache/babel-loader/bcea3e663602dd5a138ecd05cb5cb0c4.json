{"ast":null,"code":"import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nconst firefox = userAgent.indexOf('firefox') !== -1;\nconst {\n  WHEEL_EVENTS\n} = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel'; // Constants for normalizing input delta\n\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40; // Slow down zoom if shift key is held for more precise zooming\n\nconst SHIFT_MULTIPLIER = 0.25;\nexport default class WheelInput extends Input {\n  constructor(element, callback, options) {\n    super(element, callback, options);\n    /* eslint-disable complexity, max-statements */\n\n    this.handleEvent = event => {\n      if (!this.options.enable) {\n        return;\n      }\n\n      let value = event.deltaY;\n\n      if (window.WheelEvent) {\n        // Firefox doubles the values on retina screens...\n        if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n          value /= window.devicePixelRatio;\n        }\n\n        if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n          value *= WHEEL_DELTA_PER_LINE;\n        }\n      }\n\n      if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n        // This one is definitely a mouse wheel event.\n        // Normalize this value to match trackpad.\n        value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n      }\n\n      if (event.shiftKey && value) {\n        value = value * SHIFT_MULTIPLIER;\n      }\n\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        delta: -value,\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n\n    this.events = (this.options.events || []).concat(WHEEL_EVENTS);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent, passiveSupported ? {\n      passive: false\n    } : false));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n\n\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/inputs/wheel-input.ts"],"names":[],"mappings":"AACA,OAAO,KAAP,MAAkC,SAAlC;AAEA,SAAQ,iBAAR,QAAgC,cAAhC;AACA,SAAQ,MAAR,EAAgB,SAAhB,EAA2B,gBAA3B,QAAkD,kBAAlD;AAEA,MAAM,OAAO,GAAG,SAAS,CAAC,OAAV,CAAkB,SAAlB,MAAiC,CAAC,CAAlD;AAEA,MAAM;EAAC;AAAD,IAAiB,iBAAvB;AACA,MAAM,UAAU,GAAG,OAAnB,C,CAEA;;AACA,MAAM,wBAAwB,GAAG,cAAjC;AACA,MAAM,oBAAoB,GAAG,EAA7B,C,CACA;;AACA,MAAM,gBAAgB,GAAG,IAAzB;AAEA,eAAc,MAAO,UAAP,SAA0B,KAA1B,CAAmE;EAG/E,WAAA,CACE,OADF,EAEE,QAFF,EAGE,OAHF,EAGuB;IAErB,MAAM,OAAN,EAAe,QAAf,EAAyB,OAAzB;IAuBF;;IACA,KAAA,WAAA,GAAe,KAAD,IAAsB;MAClC,IAAI,CAAC,KAAK,OAAL,CAAa,MAAlB,EAA0B;QACxB;MACD;;MAED,IAAI,KAAK,GAAG,KAAK,CAAC,MAAlB;;MACA,IAAI,MAAM,CAAC,UAAX,EAAuB;QACrB;QACA,IAAI,OAAO,IAAI,KAAK,CAAC,SAAN,KAAoB,MAAM,CAAC,UAAP,CAAkB,eAArD,EAAsE;UACpE,KAAK,IAAI,MAAM,CAAC,gBAAhB;QACD;;QACD,IAAI,KAAK,CAAC,SAAN,KAAoB,MAAM,CAAC,UAAP,CAAkB,cAA1C,EAA0D;UACxD,KAAK,IAAI,oBAAT;QACD;MACF;;MAED,IAAI,KAAK,KAAK,CAAV,IAAe,KAAK,GAAG,wBAAR,KAAqC,CAAxD,EAA2D;QACzD;QACA;QACA,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,wBAAnB,CAAR;MACD;;MAED,IAAI,KAAK,CAAC,QAAN,IAAkB,KAAtB,EAA6B;QAC3B,KAAK,GAAG,KAAK,GAAG,gBAAhB;MACD;;MAED,KAAK,QAAL,CAAc;QACZ,IAAI,EAAE,UADM;QAEZ,MAAM,EAAE;UACN,CAAC,EAAE,KAAK,CAAC,OADH;UAEN,CAAC,EAAE,KAAK,CAAC;QAFH,CAFI;QAMZ,KAAK,EAAE,CAAC,KANI;QAOZ,QAAQ,EAAE,KAPE;QAQZ,WAAW,EAAE,OARD;QASZ,MAAM,EAAE,KAAK,CAAC;MATF,CAAd;IAWD,CArCD;;IAtBE,KAAK,MAAL,GAAc,CAAC,KAAK,OAAL,CAAa,MAAb,IAAuB,EAAxB,EAA4B,MAA5B,CAAmC,YAAnC,CAAd;IAEA,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,IACvB,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAgC,KAAK,WAArC,EAAkD,gBAAgB,GAAG;MAAC,OAAO,EAAE;IAAV,CAAH,GAAsB,KAAxF,CADF;EAGD;;EAED,OAAO,GAAA;IACL,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,IAAI,KAAK,OAAL,CAAa,mBAAb,CAAiC,KAAjC,EAAwC,KAAK,WAA7C,CAA7B;EACD;EAED;;;AAGG;;;EACH,eAAe,CAAC,SAAD,EAAoB,OAApB,EAAoC;IACjD,IAAI,SAAS,KAAK,UAAlB,EAA8B;MAC5B,KAAK,OAAL,CAAa,MAAb,GAAsB,OAAtB;IACD;EACF;;AA7B8E","sourceRoot":"","sourcesContent":["import Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nconst firefox = userAgent.indexOf('firefox') !== -1;\nconst { WHEEL_EVENTS } = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel';\n// Constants for normalizing input delta\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\n// Slow down zoom if shift key is held for more precise zooming\nconst SHIFT_MULTIPLIER = 0.25;\nexport default class WheelInput extends Input {\n    constructor(element, callback, options) {\n        super(element, callback, options);\n        /* eslint-disable complexity, max-statements */\n        this.handleEvent = (event) => {\n            if (!this.options.enable) {\n                return;\n            }\n            let value = event.deltaY;\n            if (window.WheelEvent) {\n                // Firefox doubles the values on retina screens...\n                if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n                    value /= window.devicePixelRatio;\n                }\n                if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n                    value *= WHEEL_DELTA_PER_LINE;\n                }\n            }\n            if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n                // This one is definitely a mouse wheel event.\n                // Normalize this value to match trackpad.\n                value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n            }\n            if (event.shiftKey && value) {\n                value = value * SHIFT_MULTIPLIER;\n            }\n            this.callback({\n                type: EVENT_TYPE,\n                center: {\n                    x: event.clientX,\n                    y: event.clientY\n                },\n                delta: -value,\n                srcEvent: event,\n                pointerType: 'mouse',\n                target: event.target\n            });\n        };\n        this.events = (this.options.events || []).concat(WHEEL_EVENTS);\n        this.events.forEach(event => element.addEventListener(event, this.handleEvent, passiveSupported ? { passive: false } : false));\n    }\n    destroy() {\n        this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n    enableEventType(eventType, enabled) {\n        if (eventType === EVENT_TYPE) {\n            this.options.enable = enabled;\n        }\n    }\n}\n//# sourceMappingURL=wheel-input.js.map"]},"metadata":{},"sourceType":"module"}