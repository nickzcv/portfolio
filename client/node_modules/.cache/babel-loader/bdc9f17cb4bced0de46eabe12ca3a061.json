{"ast":null,"code":"import { transformMat4, scale } from 'gl-matrix/vec4';\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\nexport function transformVector(matrix, vector) {\n  var result = transformMat4([], vector, matrix);\n  scale(result, result, 1 / result[3]);\n  return result;\n}\nexport function mod(value, divisor) {\n  var modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\nexport function lerp(start, end, step) {\n  return step * end + (1 - step) * start;\n}\nexport function clamp(x, min, max) {\n  return x < min ? min : x > max ? max : x;\n}\n\nfunction ieLog2(x) {\n  return Math.log(x) * Math.LOG2E;\n}\n\nexport var log2 = Math.log2 || ieLog2;","map":{"version":3,"sources":["../../src/math-utils.ts"],"names":["result","transformMat4","scale","modulus","value","divisor","step","x","Math","log2"],"mappings":"AAAA,SAAA,aAAA,EAAA,KAAA,QAAA,gBAAA;AAGA,OAAO,SAAA,UAAA,GAAgC;EACrC,OAAO,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;AAGD,OAAO,SAAA,eAAA,CAAA,MAAA,EAAA,MAAA,EAAuE;EAC5E,IAAMA,MAAM,GAAGC,aAAa,CAAA,EAAA,EAAA,MAAA,EAA5B,MAA4B,CAA5B;EACAC,KAAK,CAAA,MAAA,EAAA,MAAA,EAAiB,IAAIF,MAAM,CAAhCE,CAAgC,CAA3B,CAALA;EACA,OAAA,MAAA;AACD;AAED,OAAO,SAAA,GAAA,CAAA,KAAA,EAAA,OAAA,EAAqD;EAC1D,IAAMC,OAAO,GAAGC,KAAK,GAArB,OAAA;EACA,OAAOD,OAAO,GAAPA,CAAAA,GAAcE,OAAO,GAArBF,OAAAA,GAAP,OAAA;AACD;AAED,OAAO,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAgE;EACrE,OAAOG,IAAI,GAAJA,GAAAA,GAAa,CAAC,IAAD,IAAA,IAApB,KAAA;AACD;AAED,OAAO,SAAA,KAAA,CAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAA4D;EACjE,OAAOC,CAAC,GAADA,GAAAA,GAAAA,GAAAA,GAAgBA,CAAC,GAADA,GAAAA,GAAAA,GAAAA,GAAvB,CAAA;AACD;;AAED,SAAA,MAAA,CAAA,CAAA,EAAmC;EACjC,OAAOC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAzB,KAAA;AACD;;AAED,OAAO,IAAMC,IAAI,GAAGD,IAAI,CAAJA,IAAAA,IAAb,MAAA","sourcesContent":["import {transformMat4, scale} from 'gl-matrix/vec4';\n\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4(): number[] {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n// Transforms a vec4 with a projection matrix\nexport function transformVector(matrix: number[], vector: number[]): number[] {\n  const result = transformMat4([] as number[], vector, matrix);\n  scale(result, result, 1 / result[3]);\n  return result;\n}\n\nexport function mod(value: number, divisor: number): number {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\nexport function lerp(start: number, end: number, step: number): number {\n  return step * end + (1 - step) * start;\n}\n\nexport function clamp(x: number, min: number, max: number): number {\n  return x < min ? min : x > max ? max : x;\n}\n\nfunction ieLog2(x: number): number {\n  return Math.log(x) * Math.LOG2E;\n}\n// Handle missing log2 in IE 11\nexport const log2 = Math.log2 || ieLog2;\n"]},"metadata":{},"sourceType":"module"}