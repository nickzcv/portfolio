{"ast":null,"code":"var EPSILON = 1e-7;\n\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\nexport function equals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return Math.abs(a - b) <= EPSILON;\n}\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}","map":{"version":3,"sources":["../../../src/utils/math-utils.js"],"names":["EPSILON","Array","ArrayBuffer","a","isArray","b","i","equals","Math","lerp","t"],"mappings":"AAAA,IAAMA,OAAO,GAAb,IAAA;;AAGA,SAAA,OAAA,CAAA,KAAA,EAAwB;EACtB,OAAOC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,KAAwBC,WAAW,CAAXA,MAAAA,CAA/B,KAA+BA,CAA/B;AACD;;AAGD,OAAO,SAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAsB;EAC3B,IAAIC,CAAC,KAAL,CAAA,EAAa;IACX,OAAA,IAAA;EACD;;EACD,IAAIC,OAAO,CAAPA,CAAO,CAAPA,IAAcA,OAAO,CAAzB,CAAyB,CAAzB,EAA8B;IAC5B,IAAID,CAAC,CAADA,MAAAA,KAAaE,CAAC,CAAlB,MAAA,EAA2B;MACzB,OAAA,KAAA;IACD;;IACD,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGH,CAAC,CAArB,MAAA,EAA8B,EAA9B,CAAA,EAAmC;MACjC,IAAI,CAACI,MAAM,CAACJ,CAAC,CAAF,CAAE,CAAF,EAAOE,CAAC,CAAnB,CAAmB,CAAR,CAAX,EAAyB;QACvB,OAAA,KAAA;MACD;IACF;;IACD,OAAA,IAAA;EACD;;EACD,OAAOG,IAAI,CAAJA,GAAAA,CAASL,CAAC,GAAVK,CAAAA,KAAP,OAAA;AACD;AAED,OAAO,SAAA,KAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAgC;EACrC,OAAOA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA,EAAcA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA,EAArB,KAAqBA,CAAdA,CAAP;AACD;AAGD,OAAO,SAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAuB;EAC5B,IAAIJ,OAAO,CAAX,CAAW,CAAX,EAAgB;IACd,OAAO,CAAC,CAAD,GAAA,CAAM,UAAA,EAAA,EAAA,CAAA,EAAA;MAAA,OAAWK,IAAI,CAAA,EAAA,EAAKJ,CAAC,CAAN,CAAM,CAAN,EAAf,CAAe,CAAf;IAAb,CAAO,CAAP;EACD;;EACD,OAAOK,CAAC,GAADA,CAAAA,GAAQ,CAAC,IAAD,CAAA,IAAf,CAAA;AACD","sourcesContent":["const EPSILON = 1e-7;\n\n// Returns true if value is either an array or a typed array\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// TODO: use math.gl\nexport function equals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return Math.abs(a - b) <= EPSILON;\n}\n\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\n// Interpolate between two numbers or two arrays\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map((ai, i) => lerp(ai, b[i], t));\n  }\n  return t * b + (1 - t) * a;\n}\n"]},"metadata":{},"sourceType":"module"}