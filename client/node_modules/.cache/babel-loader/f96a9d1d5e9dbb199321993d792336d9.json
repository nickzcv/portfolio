{"ast":null,"code":"import { useContext, useRef, useEffect } from 'react';\nimport * as PropTypes from 'prop-types';\nimport MapContext from './map-context';\nexport var mapControlDefaultProps = {\n  captureScroll: false,\n  captureDrag: true,\n  captureClick: true,\n  captureDoubleClick: true,\n  capturePointerMove: false\n};\nexport var mapControlPropTypes = {\n  captureScroll: PropTypes.bool,\n  captureDrag: PropTypes.bool,\n  captureClick: PropTypes.bool,\n  captureDoubleClick: PropTypes.bool,\n  capturePointerMove: PropTypes.bool\n};\n\nfunction onMount(thisRef) {\n  var ref = thisRef.containerRef.current;\n  var eventManager = thisRef.context.eventManager;\n\n  if (!ref || !eventManager) {\n    return undefined;\n  }\n\n  var events = {\n    wheel: function wheel(evt) {\n      var props = thisRef.props;\n\n      if (props.captureScroll) {\n        evt.stopPropagation();\n      }\n\n      if (props.onScroll) {\n        props.onScroll(evt, thisRef);\n      }\n    },\n    panstart: function panstart(evt) {\n      var props = thisRef.props;\n\n      if (props.captureDrag) {\n        evt.stopPropagation();\n      }\n\n      if (props.onDragStart) {\n        props.onDragStart(evt, thisRef);\n      }\n    },\n    anyclick: function anyclick(evt) {\n      var props = thisRef.props;\n\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n\n      if (props.onNativeClick) {\n        props.onNativeClick(evt, thisRef);\n      }\n    },\n    click: function click(evt) {\n      var props = thisRef.props;\n\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n\n      if (props.onClick) {\n        props.onClick(evt, thisRef);\n      }\n    },\n    dblclick: function dblclick(evt) {\n      var props = thisRef.props;\n\n      if (props.captureDoubleClick) {\n        evt.stopPropagation();\n      }\n\n      if (props.onDoubleClick) {\n        props.onDoubleClick(evt, thisRef);\n      }\n    },\n    pointermove: function pointermove(evt) {\n      var props = thisRef.props;\n\n      if (props.capturePointerMove) {\n        evt.stopPropagation();\n      }\n\n      if (props.onPointerMove) {\n        props.onPointerMove(evt, thisRef);\n      }\n    }\n  };\n  eventManager.watch(events, ref);\n  return function () {\n    eventManager.off(events);\n  };\n}\n\nexport default function useMapControl() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = useContext(MapContext);\n  var containerRef = useRef(null);\n\n  var _thisRef = useRef({\n    props: props,\n    state: {},\n    context: context,\n    containerRef: containerRef\n  });\n\n  var thisRef = _thisRef.current;\n  thisRef.props = props;\n  thisRef.context = context;\n  useEffect(function () {\n    return onMount(thisRef);\n  }, [context.eventManager]);\n  return thisRef;\n}","map":{"version":3,"sources":["../../../src/components/use-map-control.js"],"names":["mapControlDefaultProps","captureScroll","captureDrag","captureClick","captureDoubleClick","capturePointerMove","mapControlPropTypes","PropTypes","bool","ref","thisRef","eventManager","events","wheel","props","evt","panstart","anyclick","click","dblclick","pointermove","context","useContext","containerRef","useRef","_thisRef","state","useEffect","onMount"],"mappings":"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","sourcesContent":["import {useContext, useRef, useEffect} from 'react';\nimport * as PropTypes from 'prop-types';\nimport MapContext from './map-context';\n\nexport const mapControlDefaultProps = {\n  captureScroll: false,\n  captureDrag: true,\n  captureClick: true,\n  captureDoubleClick: true,\n  capturePointerMove: false\n};\n\nexport const mapControlPropTypes = {\n  /** Event handling */\n  captureScroll: PropTypes.bool,\n  // Stop map pan & rotate\n  captureDrag: PropTypes.bool,\n  // Stop map click\n  captureClick: PropTypes.bool,\n  // Stop map double click\n  captureDoubleClick: PropTypes.bool,\n  // Stop map pointer move\n  capturePointerMove: PropTypes.bool\n};\n\nfunction onMount(thisRef) {\n  const ref = thisRef.containerRef.current;\n  const {eventManager} = thisRef.context;\n  if (!ref || !eventManager) {\n    return undefined;\n  }\n\n  const events = {\n    wheel: evt => {\n      const {props} = thisRef;\n      if (props.captureScroll) {\n        evt.stopPropagation();\n      }\n      if (props.onScroll) {\n        props.onScroll(evt, thisRef);\n      }\n    },\n    panstart: evt => {\n      const {props} = thisRef;\n      if (props.captureDrag) {\n        evt.stopPropagation();\n      }\n      if (props.onDragStart) {\n        props.onDragStart(evt, thisRef);\n      }\n    },\n    anyclick: evt => {\n      const {props} = thisRef;\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n      if (props.onNativeClick) {\n        props.onNativeClick(evt, thisRef);\n      }\n    },\n    click: evt => {\n      const {props} = thisRef;\n      if (props.captureClick) {\n        evt.stopPropagation();\n      }\n      if (props.onClick) {\n        props.onClick(evt, thisRef);\n      }\n    },\n    dblclick: evt => {\n      const {props} = thisRef;\n      if (props.captureDoubleClick) {\n        evt.stopPropagation();\n      }\n      if (props.onDoubleClick) {\n        props.onDoubleClick(evt, thisRef);\n      }\n    },\n    pointermove: evt => {\n      const {props} = thisRef;\n      if (props.capturePointerMove) {\n        evt.stopPropagation();\n      }\n      if (props.onPointerMove) {\n        props.onPointerMove(evt, thisRef);\n      }\n    }\n  };\n  eventManager.watch(events, ref);\n\n  // Clean up\n  return () => {\n    eventManager.off(events);\n  };\n}\n\nexport default function useMapControl(props = {}) {\n  const context = useContext(MapContext);\n  const containerRef = useRef(null);\n  const _thisRef = useRef({props, state: {}, context, containerRef});\n  const thisRef = _thisRef.current;\n\n  thisRef.props = props;\n  thisRef.context = context;\n\n  useEffect(() => onMount(thisRef), [context.eventManager]);\n\n  return thisRef;\n}\n"]},"metadata":{},"sourceType":"module"}